---
name: CI

on:
    push:
        branches-ignore:
            - classic*
    pull_request:
        branches-ignore:
            - classic*

env:
    ASAN_OPTIONS: detect_stack_use_after_return=1:detect_leaks=0

jobs:
    cppcheck:
        runs-on: ubuntu-22.04

        steps:
            - uses: actions/checkout@v3

            - name: install dependencies
              run: |
                  # git status
                  # sudo apt-get update
                  # sudo apt-get install libgsl-dev
                  # sudo apt install -y openmpi-bin libopenmpi-dev
                  sudo apt-get -y install cppcheck

            - name: run cppcheck
              run: |
                  cp artisoptions_nltenebular.h artisoptions.h
                  cppcheck --force --language=c++ --std=c++20 .

    clang-format:
        runs-on: ubuntu-22.04

        steps:
            - uses: actions/checkout@v3

            - name: Run clang-format style check
              uses: jidicula/clang-format-action@v4.9.0
              with:
                  clang-format-version: '15'
                  check-path: .

    compile:
        runs-on: ubuntu-22.04
        strategy:
            matrix:
                compiler: [{name: gcc-11, cmd: g++-11}, {name: gcc-12, cmd: g++-12}, {name: clang 14, cmd: clang++}]
                mpi: [ON, OFF]
            fail-fast: false

        name: compile ${{ matrix.compiler.name }}${{ matrix.mpi == 'ON' && ' MPI' || ''}}
        steps:
            - uses: actions/checkout@v3

            - name: CPU count
              id: cpu-count
              run: |
                  sudo apt-get update
                  # echo "count=$(python3 -c 'import psutil; print(int(psutil.cpu_count(logical=False)))')" >> $GITHUB_OUTPUT
                  echo "count=$(python3 -c 'import multiprocessing; print(multiprocessing.cpu_count())')" >> $GITHUB_OUTPUT

            - name: Install gcc-11
              if: matrix.compiler.name == 'gcc-11'
              run: |
                  sudo apt-get install -y gcc-11 g++-11

            - name: Install gcc-12
              if: matrix.compiler.name == 'gcc-12'
              run: |
                  sudo apt-get install -y gcc-12 g++-12

            - name: Install clang 14
              if: matrix.compiler.name == 'clang 14'
              run: |
                  sudo apt-get install -y clang-14 --install-suggests

            - name: install openmpi
              if: matrix.mpi == 'ON'
              run: |
                  sudo apt install -y openmpi-bin libopenmpi-dev

            - name: install gsl
              run: sudo apt-get install libgsl-dev

            - name: Set compiler environment variables (MPI off)
              if: matrix.mpi == 'OFF'
              run: echo "CXX=${{ matrix.compiler.cmd }}" >> $GITHUB_ENV

            - name: Set compiler environment variables (MPI on)
              if: matrix.mpi == 'ON'
              run: |
                  echo "OMPI_CXX=${{ matrix.compiler.cmd }}" >> $GITHUB_ENV
                  echo "CXX=mpicxx" >> $GITHUB_ENV
                  mpicxx --showme:version

            - name: Show compiler version
              run: |
                  ${{ env.CXX }} --version

            - name: Compile
              run: |
                  for aofile in artisoptions_*.h; do
                    echo $aofile
                    cp -v $aofile artisoptions.h
                    make clean
                    make MPI=${{matrix.mpi}} -j${{ steps.cpu-count.outputs.count}} sn3d exspec
                  done

    testmodels:
        strategy:
            matrix:
        # os: ['ubuntu-latest', 'self-hosted']
                os: [ubuntu-22.04]
                testmode: [OFF, ON]
                testname: [classicmode, nebularonezone, kilonova]
                exclude:
                    - os: self-hosted
                      testmode: ON
            fail-fast: false

        runs-on: ${{ matrix.os }}
        name: ${{ matrix.testname }} MPI${{ matrix.testmode == 'ON' && ' testmode ON' || ''}}

        steps:
            - uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: install dependencies
              if: matrix.os != 'selfhosted'
              run: |
                  git status
                  sudo apt-get update
                  sudo apt-get install -y gcc-12 g++-12
                  sudo apt-get install -y libgsl-dev
                  sudo apt install -y openmpi-bin libopenmpi-dev
                  echo "OMPI_CXX=g++-12" >> $GITHUB_ENV

            - name: CPU count
              id: cpu-count
              run: |
                  sudo apt-get update
                  echo "count=$(python3 -c 'import multiprocessing; print(multiprocessing.cpu_count())')" >> $GITHUB_OUTPUT

      # we can cache this, but then we don't test the code that generates ratecoeff.dat
            - name: Cache ratecoeff.dat
              if: matrix.testname == 'classicmode'
              uses: actions/cache@v3
        # if: matrix.testmode != 'ON'
              with:
                  path: tests/${{ matrix.testname }}_testrun/ratecoeff.dat
                  key: tests/${{ matrix.testname }}_testrun/ratecoeff.dat

            - name: Cache test atomic data
              uses: actions/cache@v3
              id: cache-testatomicdata
              with:
                  path: tests/atomicdata_feconi.tar.xz
                  key: tests/atomicdata_feconi.tar.xz

            - name: Download/extract test data
              working-directory: tests/
              run: |
                  source ./setup_${{ matrix.testname }}.sh

            - name: cat artisoptions.h
              run: |
                  cp tests/${{ matrix.testname }}_testrun/artisoptions.h .
                  cat artisoptions.h

            - name: Compile
              run: |
                  mpicxx --version
                  mpicxx --showme:version
                  make clean
                  make TESTMODE=${{ matrix.testmode }} MPI=ON -j${{ steps.cpu-count.outputs.count }} sn3d exspec
                  cp sn3d tests/${{ matrix.testname }}_testrun/
                  cp exspec tests/${{ matrix.testname }}_testrun/

            - name: Run test job0 start
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: |
                  cp input-newrun.txt input.txt
                  touch output_0-0.txt
                  time mpirun -np 2 ./sn3d

            - name: cat job0 estimators
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: cat estimators*.out

            - name: cat job0 output log
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: cat output_0-0.txt

            - name: Checksum job0 output files
              if: always() && matrix.os != 'selfhosted'
              working-directory: tests/${{ matrix.testname }}_testrun
              run: |
                  mkdir job0
                  ../../scripts/movefiles.sh job0
                  md5sum *.out job0/*.out

                  if [ -f results_md5_job0.txt ]; then md5sum -c results_md5_job0.txt; else echo "results_md5_job0.txt not found"; fi

            - name: Run test job1 resume
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: |
                  cp input-resume.txt input.txt
                  time mpirun -np 2 ./sn3d

            - name: cat job1 estimators
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: cat estimators*.out

            - name: cat job1 output log
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: cat output_0-0.txt

            - name: Run exspec
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: |
                  mkdir job1
                  ../../scripts/movefiles.sh job1
                  time mpirun -np 1 ./exspec

            - name: cat exspec log
              if: always()
              working-directory: tests/${{ matrix.testname }}_testrun/
              run: |
                  mkdir output
                  cp -r output_0-0.txt exspec.txt *.out output/
                  rsync -av job0 output/
                  rsync -av job1 output/
                  cat exspec.txt

            - name: Checksum job1 output files
              if: always() && matrix.os != 'selfhosted'
              working-directory: tests/${{ matrix.testname }}_testrun
              run: |
                  md5sum *.out job1/*.out
                  if [ -f results_md5_final.txt ]; then md5sum -c results_md5_final.txt; else echo "results_md5_final.txt not found"; fi

            - name: Prepare for next steps
              if: always() && matrix.os != 'selfhosted'
              working-directory: tests/${{ matrix.testname }}_testrun
              run: |
                  touch requirements.txt
                  rm output/packets*.*

            - name: Upload output files
              uses: actions/upload-artifact@v3
              if: always() && matrix.os != 'selfhosted' && matrix.testmode == 'OFF'
              with:
                  name: test-${{ matrix.testname }}-output
                  path: tests/${{ matrix.testname }}_testrun/output

            - name: Set up Python
              if: always() && matrix.os != 'selfhosted' && matrix.testmode == 'OFF'
              uses: actions/setup-python@v4
              with:
                  python-version: '3.10'
                  cache: pip

            - name: Install artistools
              if: always() && matrix.testmode == 'OFF'
              run: |
                  python3 -m pip install --upgrade pip
                  python3 -m pip install artistools

                  # upgrade all installed packages to their latest versions
                  # python3 -m pip list freeze --outdated | tail -n +3 | cut -w -f1 | xargs -n1 python3 -m pip install --upgrade

            - name: Plot light curve
              if: always() && matrix.testmode == 'OFF'
              working-directory: tests/
              run: |
                  python3 -m artistools.lightcurve ${{ matrix.testname }}_testrun

            - name: Plot spectrum nebularonezone
              if: always() && matrix.testname == 'nebularonezone' && matrix.testmode == 'OFF'
              working-directory: tests/
              run: |
                  python3 -m artistools.spectra -ts 8 ${{ matrix.testname }}_testrun

            - name: Plot spectrum classicmode
              if: always() && matrix.testname == 'classicmode' && matrix.testmode == 'OFF'
              working-directory: tests/
              run: |
                  python3 -m artistools.spectra -t 18-22 ${{ matrix.testname }}_testrun

            - name: Upload plot files
              if: always() && matrix.os != 'selfhosted' && matrix.testmode == 'OFF'
              uses: actions/upload-artifact@v3
              with:
                  name: test-${{ matrix.testname }}-output-pdf
                  path: tests/*.pdf

  # - name: Compile previous commit
  #   if: matrix.testmode == 'OFF'
  #   continue-on-error: true
  #   run: |
  #       git checkout HEAD~1
  #       git log -n 1
  #       cp tests/${{ matrix.testname }}_testrun/artisoptions.h .
  #       make clean
  #       make TESTMODE=${{ matrix.testmode }} MPI=ON -j${{ steps.cpu-count.outputs.count }} sn3d exspec
  #       cp sn3d tests/${{ matrix.testname }}_testrun/
  #       cp exspec tests/${{ matrix.testname }}_testrun/

  # - name: Run previous commit job0 start
  #   if: matrix.testmode == 'OFF'
  #   continue-on-error: true
  #   working-directory: tests/${{ matrix.testname }}_testrun/
  #   run: |
  #       cp input-newrun.txt input.txt
  #       touch output_0-0.txt
  #       time mpirun -np 2 ./sn3d
